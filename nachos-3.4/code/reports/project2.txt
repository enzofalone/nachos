PROJECT 2

Enzo Falone
Franco Remy
Javier Garcia

DESCRIPTION

This project implements different system calls such as fork, yield, exec, kill, join, and exit. Our implementation is a continuation of Professor Rangaswami's guidance around managing memory by allocating 
and deallocating memory in the address space with the use of different processes in order for applications to be ran sucessfully using the nachos operating system. In order to make these system calls, we had to learn about processes,
memory allocation using the PCB manager, registers, address spaces, threads and applying previous implementations such as locks that were created in project 1 in order to end up implementing the PCBManager.

All of the system calls are implemented in exception.cc and all system calls (fork, yield, kill, join, exit) except for exec work correctly as we get a not sufficient memory error when forking in the test. We assume this issue is because of a wrong allocation of 
memory and we could not proceed in how to further fix this issue. On the bright side, error handling seems to work correctly for memory allocation.

Tests can be ran by compiling nachos under /code and executing the following:

./userprog/nachos -x ./test/fork
./userprog/nachos -x ./test/kill
./userprog/nachos -x ./test/join
./userprog/nachos -x ./test/exec
./userprog/nachos -x ./test/kill_random

Yield is already used in the fork test
