PROJECT 1

Enzo Falone

EXERCISE 1

For ThreadTest(int n) with values 0 through 4 I was able to see that n=0,1 would return the same output due to the for loop that 
iterates from 1 to n and it also calls SimpleThread(0). For values 2-4 I saw that all threads go in order to increase their value to 5 
for every thread. I was surprised by this behavior as I was expecting the SharedVariable to be used across threads as we were only 
forking the function and supposed anything outside would be owned by the main process.

Using semaphores, I was able to see that now the SharedVariable would work as intended, being shared across all threads and being
incremented by one for every thread in order. With ThreadTest(4) the value would reach 20. However, by using the `-rs` option I was
able to see a much randomized and not synchronized order of operations by using random seed 123 as an example. After yielding until
all threads were done this problem would not occur anymore. The only variation is which thread prints that it saw the final value
which is expected.

EXERCISE 2

As described in the project description, locks are very similar to semaphores. It uses a queue in order to append in order
all threads that are awaiting to use a certain function and making them sleep, until the previous thread releases the lock
and wakes up the next thread to use the function.

The difference between the semaphore and lock is that a lock only accomodates one thread prior to locking (we use the variable free)
the semaphore on the other side, allows for n amount of threads to be inside the semaphore prior to making other threads in the queue 
sleep.

EXERCISE 3

All the Condition operations have been implemented correctly. The task was to implement condition variables for thread synchronization 
in the synch.cc file. This involved writing five key functions: a constructor to initialize condition objects, a destructor to deallocate them, 
Wait to make a thread wait on a condition while releasing a lock, Signal to wake up one waiting thread, and Broadcast to wake up all waiting threads. 
These operations ensure that threads coordinate properly by waiting for and signaling each other when specific conditions are met.

EXERCISE 4

For ElevatorTest, I managed to write the logic for how the elevator should work. A person is able to hail the elevator, those who are in are able to get out, and those
who are out are able to get in. The issue currently is unable to build a working solution for managing the hails of the elevator. For the current state of the program, out
of five people, all five can hail the elevator, but the elevator Wait never wakes and the thread completes with no issue. I've tried work arounds with the Signaling and Waits
but I've only managed to get the elevator working for one person where it arrives to the person, takes people who are in out, and people who are out in, the elevator moves up
and then the thread breaks.